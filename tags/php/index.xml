<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Php on wroot</title>
    <link>http://wroot.org/tags/php/</link>
    <description>Recent content in Php on wroot</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 10 Apr 2014 23:11:52 +0000</lastBuildDate>
    
	<atom:link href="http://wroot.org/tags/php/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Calling functions without their names in PHP</title>
      <link>http://wroot.org/posts/calling-functions-without-their-names-in-php/</link>
      <pubDate>Thu, 10 Apr 2014 23:11:52 +0000</pubDate>
      
      <guid>http://wroot.org/posts/calling-functions-without-their-names-in-php/</guid>
      <description>Strings. Ah juicy and precious strings! It is common for malware scanners and IDPS to look for suspicious strings in network traffic and files&amp;#8230; but what if there are no strings to look for? (whaaa?)
Today I was wondering about some features found in many interpreted languages of listing its internal functions in some sort of list/array. This way we can enumerate the [index] =&amp;gt; function_name relationship, replace all function_names on the code to their index and voil√°!</description>
    </item>
    
    <item>
      <title>Whitespace Esolang Covert Channel / Steganography</title>
      <link>http://wroot.org/posts/whitespace-esolang-covert-channel-steganography/</link>
      <pubDate>Wed, 19 Feb 2014 14:31:02 +0000</pubDate>
      
      <guid>http://wroot.org/posts/whitespace-esolang-covert-channel-steganography/</guid>
      <description>I&amp;#8217;ve been always a fan of esoteric programming languages (esolangs). These programming languages are generally made just for fun, mostly in universities or for challenges. Wikipedia describes as the following:
 An esoteric programming language (esolang, in short) is a programming language designed to test the boundaries of computer programming language design, as a proof of concept, or as a joke. The use of esoteric distinguishes these languages from programming languages that working developers use to write software.</description>
    </item>
    
    <item>
      <title>Shared-hosting accounts victims of lame directory permissions</title>
      <link>http://wroot.org/posts/shared-hosting-accounts-victims-of-lame-directory-permissions/</link>
      <pubDate>Wed, 14 Dec 2011 17:40:00 +0000</pubDate>
      
      <guid>http://wroot.org/posts/shared-hosting-accounts-victims-of-lame-directory-permissions/</guid>
      <description>From a few months some clients started to complain about their shared-hosting accounts being amazingly owned even if their PHP applications (WordPress mostly) were totally up to date.
The malware got into most of the PHP files including a PHP snippet that would eval and decode a base64-encoded string containing a script declaration loading Javascript from outside. This Javascript usually initiates download of .exe&amp;#8217;s and stuff.
A friend&amp;#8217;s account got hacked a few days back by this very same technique.</description>
    </item>
    
  </channel>
</rss>