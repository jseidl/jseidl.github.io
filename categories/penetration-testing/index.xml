<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Penetration Testing on wroot</title>
    <link>http://wroot.org/categories/penetration-testing/</link>
    <description>Recent content in Penetration Testing on wroot</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 23 Sep 2015 14:13:55 +0000</lastBuildDate>
    
	<atom:link href="http://wroot.org/categories/penetration-testing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Babadook: Connection-less Powershell Persistent and Resilient “Backdoor”</title>
      <link>http://wroot.org/posts/babadook-connection-less-powershell-persistent-and-resilient-backdoor/</link>
      <pubDate>Wed, 23 Sep 2015 14:13:55 +0000</pubDate>
      
      <guid>http://wroot.org/posts/babadook-connection-less-powershell-persistent-and-resilient-backdoor/</guid>
      <description>At my previous company I used to prank the colleagues who left their stations unlocked. I call this my &amp;#8220;internal awareness program&amp;#8221;.
It was all fun and games at the beginning. I would leave post-its on their monitors with a friendly message &amp;#8220;You could&amp;#8217;ve been hacked&amp;#8221; but it wasn&amp;#8217;t giving the expected results. Some colleagues found it funny and started &amp;#8220;collecting&amp;#8221; my post-its. There was a guy in particular with 5 of them.</description>
    </item>
    
    <item>
      <title>GoldenEye 2.1 released with even more randomness</title>
      <link>http://wroot.org/posts/goldeneye-2-1-released-with-even-more-randomness/</link>
      <pubDate>Fri, 21 Feb 2014 18:32:14 +0000</pubDate>
      
      <guid>http://wroot.org/posts/goldeneye-2-1-released-with-even-more-randomness/</guid>
      <description>Recently I&amp;#8217;ve discovered that GoldenEye got his first signature from a big vendor.
That&amp;#8217;s funny since the main GoldenEye objective is to be signature-proof due its randomness. I&amp;#8217;ve done a quick search on the internet and found the signature update link for their products, downloaded, located that one mentioned above.
It was a very crude signature, as expected:
&amp;lt;Pattern&amp;gt;\[Keep-Alive: 1(1\d|20)\]&amp;lt;/Pattern&amp;gt;&amp;lt;Pattern&amp;gt;\[Cache-Control: (must-revalidate, )?no-cache\].*&amp;lt;/Pattern&amp;gt;&amp;lt;Pattern&amp;gt;\[http://(www\.(google|usatoday)|engadget\.search\.aol)\.com/(search)?(/results)?\?q\].*&amp;lt;/Pattern&amp;gt;&amp;lt;Pattern&amp;gt;.*\[(Mozilla/\d\.\d|Opera 9.80) \((Windows|X11|compatible); U?; (Linux|Windows NT \d\.</description>
    </item>
    
    <item>
      <title>Whitespace Esolang Covert Channel / Steganography</title>
      <link>http://wroot.org/posts/whitespace-esolang-covert-channel-steganography/</link>
      <pubDate>Wed, 19 Feb 2014 14:31:02 +0000</pubDate>
      
      <guid>http://wroot.org/posts/whitespace-esolang-covert-channel-steganography/</guid>
      <description>I&amp;#8217;ve been always a fan of esoteric programming languages (esolangs). These programming languages are generally made just for fun, mostly in universities or for challenges. Wikipedia describes as the following:
 An esoteric programming language (esolang, in short) is a programming language designed to test the boundaries of computer programming language design, as a proof of concept, or as a joke. The use of esoteric distinguishes these languages from programming languages that working developers use to write software.</description>
    </item>
    
    <item>
      <title>New version of GoldenEye WebServer DoS tool released</title>
      <link>http://wroot.org/posts/new-version-of-goldeneye-webserver-dos-tool-released/</link>
      <pubDate>Tue, 26 Mar 2013 21:58:19 +0000</pubDate>
      
      <guid>http://wroot.org/posts/new-version-of-goldeneye-webserver-dos-tool-released/</guid>
      <description>After the hackers 2 hackers conference talk last year, some people contacted me about known Python performance issues regarding the use of threads related to the GIL.
Indeed the threading wasn&amp;#8217;t performing well due the nature of GIL so I&amp;#8217;ve rewritten the code to support Python&amp;#8217;s multiprocessing module. It&amp;#8217;s a tad faster but I haven&amp;#8217;t tested it exhaustively so if you feel the inner-beta-tester in you, let me know!
The download is available as always at the github project page at https://github.</description>
    </item>
    
    <item>
      <title>Quick and dirty ngrep credential (username/password) sniffer</title>
      <link>http://wroot.org/posts/quick-and-dirty-ngrep-credential-usernamepassword-sniffer/</link>
      <pubDate>Wed, 31 Oct 2012 02:59:25 +0000</pubDate>
      
      <guid>http://wroot.org/posts/quick-and-dirty-ngrep-credential-usernamepassword-sniffer/</guid>
      <description>Some time ago I&amp;#8217;ve posted a quick (and dirty too!) command-liner using tcpdump to sniff plaintext credentials over the wire.
Now I&amp;#8217;ve acomplished the same thing with a shorter regex and ngrep tool.
ngrep &amp;#39;[&amp;amp;\s?](?:login|user(?:name|)|p(ass(?:word|wd|)|w|wd))[\s:=]\s?([^&amp;amp;\s]*)&amp;#39; -q -i Where -i is for case-insensitive and -q for more precise output. See man ngrep for additional information.
And the output is as follows:
interface: eth0 (10.1.1.0/255.255.255.0)match: [&amp;amp;\s?](?:login|user(?:name|)|p(ass(?:word|wd|)|w|wd))[\s:=]\s?([^&amp;amp;\s]*)T 10.1.1.111:49196 -&amp;gt; 96.126.98.110:80 [AP]POST /users/signin &amp;lt;acronym title=&amp;#34;HyperText Transfer Protocol&amp;#34;&amp;gt;HTTP&amp;lt;/acronym&amp;gt;/1.</description>
    </item>
    
    <item>
      <title>Quick and dirty tcpdump credential (username/password) sniffer</title>
      <link>http://wroot.org/posts/quick-and-dirty-tcpdump-credential-usernamepassword-sniffer/</link>
      <pubDate>Mon, 18 Jun 2012 21:50:39 +0000</pubDate>
      
      <guid>http://wroot.org/posts/quick-and-dirty-tcpdump-credential-usernamepassword-sniffer/</guid>
      <description>I&amp;#8217;ve been playing the last months with mobile pentesting within the Android platform. As I&amp;#8217;ve been able to setup tcpdump-arm on my android phone, I began fooling around with it. I was trying to cross-compile Dug Song&amp;#8217;s dsniff into armle architechture but it was only giving me headaches within the libnet/libnids dependencies and stuff.
So I wrote a quick one-liner to dump potential credentials (username/password) flowing in plaintext over the line:</description>
    </item>
    
    <item>
      <title>Downgrade HTTPS connections to HTTP using Ettercap filters</title>
      <link>http://wroot.org/posts/downgrade-https-connections-to-http-using-ettercap-filters/</link>
      <pubDate>Tue, 13 Jul 2010 17:42:06 +0000</pubDate>
      
      <guid>http://wroot.org/posts/downgrade-https-connections-to-http-using-ettercap-filters/</guid>
      <description>Ettercap is a great tool for MITM poisoning and sniffing. Everyone on Infosec should have played with it (or Cain) at least once.
Man-In-The-Middle MITM attacks are pretty easy to perform on a local network but the tools tend to crash a LOT. Cain (Windows) is a little more stable than Ettercap but I prefer it over Cain because it doesn&amp;#8217;t spoof SSL that I consider too loud depending on the attack.</description>
    </item>
    
    <item>
      <title>MDK3 goes bruteforcing Wireless SSIDs</title>
      <link>http://wroot.org/posts/mdk3-goes-bruteforcing-wireless-ssids/</link>
      <pubDate>Wed, 09 Jun 2010 15:03:38 +0000</pubDate>
      
      <guid>http://wroot.org/posts/mdk3-goes-bruteforcing-wireless-ssids/</guid>
      <description>One good practice is to disable your SSID broadcast so you don&amp;#8217;t show up on the victims list. Although this doesn&amp;#8217;t make you completely invisible, it does aid reducing ease of location. (Networks can still be located by BSSIDs).
MDK3 was written by ASPj to bruteforce network SSIDs (even with wordlists).
Tape has done some testings around and described it all on his blog post. It has some videos too of the attack in progress on a 3-character-lenght SSID.</description>
    </item>
    
    <item>
      <title>Kentuckiana ISSA’s Metasploit Class videos available at Irongeek</title>
      <link>http://wroot.org/posts/kentuckiana-issas-metasploit-class-videos-available-at-irongeek/</link>
      <pubDate>Thu, 27 May 2010 00:02:42 +0000</pubDate>
      
      <guid>http://wroot.org/posts/kentuckiana-issas-metasploit-class-videos-available-at-irongeek/</guid>
      <description>These presentations from May 8th, 2010 performed on the Brown Hotel in Louisville, Kentucky. on exploiting with the Metasploit framework has an tremendous value. Its from this month, still fresh! Its 7 hours of presentations, it takes a while to finish (I took almost a week! phew!) but its totally worth it!
It starts with Adrian &amp;#8220;Irongeek&amp;#8221; Crenshaw introducing Metasploit exploiting a Windows box via msfweb and msfconsole. Pretty neat.</description>
    </item>
    
  </channel>
</rss>